---
interface Props {
    leftSrc: string;
    middleSrc: string;
    rightSrc: string;
    alt: string;
    leftLabel?: string;
    middleLabel?: string;
    rightLabel?: string;
}

const { 
    leftSrc, 
    middleSrc, 
    rightSrc, 
    alt, 
    leftLabel, 
    middleLabel, 
    rightLabel 
} = Astro.props;
---
<div class="container" role="figure" aria-label={alt}>
    <div class="image-row">
        <div class="image-container">
            <img src={leftSrc} alt={`${alt} (left${leftLabel ? `: ${leftLabel}` : ''})`} />
            {leftLabel && <span class="image-label">{leftLabel}</span>}
        </div>
        <div class="image-container">
            <img src={middleSrc} alt={`${alt} (middle${middleLabel ? `: ${middleLabel}` : ''})`} />
            {middleLabel && <span class="image-label">{middleLabel}</span>}
        </div>
        <div class="image-container">
            <img src={rightSrc} alt={`${alt} (right${rightLabel ? `: ${rightLabel}` : ''})`} />
            {rightLabel && <span class="image-label">{rightLabel}</span>}
        </div>
    </div>
    <p class="image-alt">{alt}</p>
</div>

<style>
.container {
    margin: 2rem auto;
    max-width: 100%;
    text-align: center;
}

.image-row {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 0.5rem;
}

.image-container {
    flex: 1;
    max-width: calc(33.333% - 0.667rem); /* Adjusts for three images with gaps */
    position: relative;
}

.image-container img {
    width: 100%;
    height: auto;
    display: block;
    border-radius: 8px;
    transition: transform 0.2s ease;
    object-fit: cover; /* Ensures consistent image display */
    aspect-ratio: 1 / 1; /* Optional: maintains square aspect ratio */
}

.image-container img:hover {
    transform: scale(1.02);
}

.image-label {
    display: block;
    margin-top: 0.5rem;
    font-size: 0.875rem;
    color: #666;
}

.image-alt {
    margin-top: 0.5rem;
    font-size: 0.875rem;
    color: #666;
    font-style: italic;
    text-align: center;
    max-width: 80ch;
    margin-inline: auto;
}

/* Responsive design */
@media (max-width: 768px) {
    .image-row {
        flex-direction: column;
        gap: 1.5rem;
    }

    .image-container {
        max-width: 100%;
    }
    
    .image-alt {
        padding: 0 1rem;
    }
}

/* Tablet layout - optional breakpoint for 2+1 layout */
@media (min-width: 769px) and (max-width: 1024px) {
    .image-row {
        flex-wrap: wrap;
    }

    .image-container {
        max-width: calc(50% - 0.5rem);
    }

    .image-container:last-child {
        max-width: 50%;
        margin: 1rem auto 0;
    }
}

/* High contrast mode support */
@media (prefers-contrast: high) {
    .image-alt,
    .image-label {
        color: #333;
    }
}

/* Reduced motion preference */
@media (prefers-reduced-motion: reduce) {
    .image-container img {
        transition: none;
    }
}
</style>